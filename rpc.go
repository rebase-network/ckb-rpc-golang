package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"

	"github.com/tidwall/pretty"
)

var (
	putf      = fmt.Printf
	putln     = fmt.Println
	gitHash   = ""
	buildDate = ""
)

const (
	VERSION = "v0.1.1"
)

type Payload struct {
	ID      int           `json:"id"`
	Jsonrpc string        `json:"jsonrpc"`
	Method  string        `json:"method"`
	Params  []interface{} `json:"params"`
}

func main() {
	ver := flag.Bool("v", false, "show version and exit")
	list := flag.Bool("list", false, "show rpc list")
	rpc := flag.String("rpc", "", "export API_URL=1.0.0.1:8114")

	flag.Parse()

	if *ver {
		putf("Ckb RPC Version: %s (%s %s)\n\n", VERSION, gitHash, buildDate)
		os.Exit(0)
	}

	if *list {
		putf("Support RPC Method:\n gbt\n tipheader\n tipblocknumber\n currentepoch\n peers\n localnodeinfo\n txpoolinfo\n")
		os.Exit(0)
	}

	switch *rpc {

	case "gbt":
		get_block_template()
	case "tipheader":
		get_tip_header()
	case "tipblocknumber":
		get_tip_block_number()
	case "currentepoch":
		get_current_epoch()
	case "peers":
		get_peers()
	case "localnodeinfo":
		local_node_info()
	case "txpoolinfo":
		tx_pool_info()
	default:
		putf("Not Found `%s` rpc method\n", *rpc)
		os.Exit(0)
	}

}

func get_block_template() {
	getRpcByMethod("get_block_template", nil)
}

func get_tip_header() {
	getRpcByMethod("get_tip_header", nil)
}

func get_tip_block_number() {
	getRpcByMethod("get_tip_block_number", nil)
}

func get_current_epoch() {
	getRpcByMethod("get_current_epoch", nil)
}

func get_peers() {
	getRpcByMethod("get_peers", nil)
}

func local_node_info() {
	getRpcByMethod("local_node_info", nil)
}

func tx_pool_info() {
	getRpcByMethod("tx_pool_info", nil)
}

func getRpcByMethod(method string, params []interface{}) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	data := Payload{
		Jsonrpc: "2.0",
		Method:  method,
		Params:  params,
	}

	payloadBytes, err := json.Marshal(data)
	if err != nil {
		panic(err)
	}

	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", getApi(), body)
	if err != nil {
		panic(err)
	}

	req.Header.Set("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	bodyByte, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	result := pretty.PrettyOptions(bodyByte, pretty.DefaultOptions)
	colorjson := pretty.Color(result, pretty.TerminalStyle)
	putf("%s\n", colorjson)

}

func getApi() string {
	defApi := "http://127.0.0.1:8114"

	if api := os.Getenv("API_URL"); api != "" {
		defApi = api
	}

	return defApi
}
